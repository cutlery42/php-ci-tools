#!/usr/bin/env php

<?php

use Composer\ClassMapGenerator\ClassMapGenerator;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\SingleCommandApplication;
use Symfony\Component\Console\Style\SymfonyStyle;
use function Psl\File\read;
use function Psl\Vec\filter;
use function Psl\Vec\filter_nulls;
use function Psl\Vec\keys;
use function Psl\Vec\map;

require __DIR__ . '/../vendor/autoload.php';

(new SingleCommandApplication())
    ->setName('Searches ambiguous classes')
    ->addArgument('paths', InputArgument::IS_ARRAY, 'The paths to scan for classes')
    ->addOption('baseline', null, InputOption::VALUE_NONE, 'Output a baseline file, instead of a table')
    ->addOption('ignore-baseline', null, InputOption::VALUE_REQUIRED, 'Path to a baseline file')
    ->setCode(function (InputInterface $input, OutputInterface $output): int {
        $io = new SymfonyStyle($input, $output);
        
        $generator = new ClassMapGenerator();
        $paths = map((array) $input->getArgument('paths'), fn($p):string => (string) realpath((string) $p));

        foreach ($paths as $path) {
            $generator->scanPaths($path);
        }
        
        $classMap = $generator->getClassMap();
        $classMap->sort();
        
        $ambiguous = $classMap->getAmbiguousClasses();
        
        if ($ambiguous === []) {
            $io->info(sprintf('"%s" classes found', $classMap->count()));
            $io->success('No ambiguous classes found');
            
            return Command::SUCCESS;
        }
        
        $baseline = (string) $input->getOption('ignore-baseline');
        if ($baseline !== '') {
            $ignored = filter(explode("\n", read(realpath($baseline))));
            $remaining = [];
            foreach ($ambiguous as $k=>$v) {
                if (in_array($k, $ignored, true)) {
                    continue;
                }
                $remaining[$k] = $v;
            }

            if ($remaining === []) {
                $io->success(sprintf('No new ambiguous classes found, "%s" ignored', count($ignored)));

                return Command::SUCCESS;
            }
        }
        
        if ($input->getOption('baseline')) {
            // output a baseline
            $io->write(implode("\n", keys($ambiguous)));
            return Command::FAILURE;
        }
        
        $t = $io->createTable();
        $t->setHeaders(['FQCN', 'Paths']);
        foreach ($ambiguous as $symbol => $paths) {
            $t->addRow([
                $symbol,
                implode("\n", $paths)
            ]);
        }
        $io->error(sprintf('"%s" ambiguous classes found', $classMap->count()));
        $t->render();
        
        
        return Command::FAILURE;
    })
    ->run();